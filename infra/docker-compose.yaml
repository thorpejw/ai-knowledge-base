services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 5
      start_period: 5s
    ports:
      - "5432:5432"
      
  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5

  web:
    build: ../apps/web
    env_file: ../apps/web/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - uploads:${FILE_STORAGE_DIR}

  websocket:
    build: ../apps/websocket-server
    env_file: .env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy


  ingest_api:
    build: ../apps/ingest-api
    env_file: .env
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - uploads:${FILE_STORAGE_DIR}
  
  worker:
    build: ../apps/worker
    env_file: ./infra/.env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - uploads:${FILE_STORAGE_DIR}           # read the uploaded files


volumes:
  pgdata:
  uploads: